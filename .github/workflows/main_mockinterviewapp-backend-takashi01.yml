# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - mockinterviewapp-backend-takashi01

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering of the workflow from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest # Specifies the type of runner to use
    permissions:
      contents: read # Required for actions/checkout to read your repository's content
    steps:
      - uses: actions/checkout@v4 # Checks out your repository code
      - name: Set up Node.js version
        uses: actions/setup-node@v3 # Action to set up Node.js
        with:
          node-version: '18.x' # Use Node.js version 18.x (match your Azure App Service setting)

      - name: npm install, build, and test
        run: | # Executes a multi-line script
          npm ci # Installs dependencies cleanly (preferred for CI/CD)
          npm run build --if-present # Runs the 'build' script if defined in package.json
          npm run test --if-present # Runs the 'test' script if defined in package.json
        env: # IMPORTANT FIX: This 'env' block must be at the same indentation level as 'run'
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }} # Pass secret to the runner's environment
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }} # Pass secret to the runner's environment

      - name: Zip artifact for deployment
        run: |
          # Create a zip file containing your application code.
          # We exclude node_modules, .git, .github (workflow files), and .env.
          # Azure will handle installing node_modules on the server after deployment.
          zip -r release.zip . -x ".git/*" ".github/workflows/*" "node_modules/*" ".env"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4 # Uploads the generated zip file as an artifact
        with:
          name: node-app # Name of the artifact
          path: release.zip # Path to the artifact file

  deploy:
    runs-on: ubuntu-latest # Specifies the type of runner for the deploy job
    needs: build # Ensures this job only runs after the 'build' job completes successfully
    environment:
      name: 'Production' # Defines a deployment environment (good practice)
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }} # Sets the URL for the environment
    permissions:
      contents: read # Required for downloading artifacts

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4 # Downloads the artifact created by the 'build' job
        with:
          name: node-app # Name of the artifact to download
      - name: Unzip artifact for deployment
        run: unzip release.zip # Unzips the downloaded artifact

      - name: Login to Azure
        uses: azure/login@v2 # Action to log in to Azure using service principal credentials
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Azure credentials stored as a GitHub secret
          auth-type: SERVICE_PRINCIPAL # Authentication type

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp # Assigns an ID to this step to reference its outputs
        uses: azure/webapps-deploy@v2 # Action to deploy to Azure Web Apps
        with:
          app-name: 'mockinterviewapp-backend-takashi01' # Your Azure Web App name
          slot-name: 'Production' # Target deployment slot (e.g., 'Production')
          package: . # The package to deploy ('.' means current directory after unzipping)
          # IMPORTANT: Azure App Service for Node.js automatically runs 'npm install'
          # if it detects a package.json. So, we generally only need to provide
          # the command to start the application after dependencies are installed.
          startup-command: 'node server.js' # Specifies the command to start your Node.js application